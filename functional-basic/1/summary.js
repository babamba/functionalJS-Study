/**
 * 평가
 * - 코드가 계산(Evulation) 되어 값을 만드는 것
 *
 *
 * 일급
 *  - 값으로 다룰 수 있다.
 *  - 변수에 담을 수 있다.
 *  - 함수의 인자로 사용될 수 있다.
 *  - 함수의 결과로 사용될 수 있다.
 *
 *
 * 일급함수
 *  - 함수를 값으로 다룰 수 있다.
 *  - 조합성과 추상화의 도구.
 *  - 함수가 일급이라는 이야기는 함수를 값으로 다룰 수 있다는 말.
 *  - 함수를 값으로 다룰수 있다는 이야기는
 *   const add5 = a => a + 5; 변수에 함수를 값으로 다뤄서 담을 수 있다는 뜻.
 *
 *  함수의 결과값으로 함수가 사용될 수 있다.
 *  const f1 = () => () => 1;
 *  log(f1());
 *  const f2 = f1();
 *
 *  log(f2); // () => 1
 *  log(f2()); // 1
 *
 *
 *
 * 고차 함수
 *  - 함수를 값으로 다루는 함수.
 *
 * ## 함수를 인자로 받아서 실행하는 함수
 *  - apply1
 *    - const apply1 = f => f(1);
 *    - const add2 = a => a + 2;
 *    - apply1(add2)
 *    - const apply1 = f => (a => a + 2)(1);
 *  - times
 *      - const times = (f, n) => {
 *          let i = -1;
 *          while(++i < n) f(i)
 *      }
 *      times(log, 3)
 *      times(a => log(a + 10), 3)
 *
 *
 * ## 함수를 만들어 리턴하는 함수 (클로저를 만들어 리턴하는 함수)
 *  - addMaker
 *  const addmaker = a => b => a + b;
 *  const add10 = addMaker(10)
 */
